{
  "openapi": "3.0.3",
  "info": {
    "title": "Swagger Movies - OpenAPI 3.0",
    "description": "The Movie Database API is a RESTful web service that allows users to perform CRUD operations on movies and users. It provides endpoints for creating, reading, updating, and deleting movies, as well as managing user accounts through registration and authentication using JWT tokens.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://http://localhost:5000/api"
    }
  ],
  "tags": [
    {
      "name": "Movies",
      "description": "API for movies"
    },
    {
      "name": "Auth",
      "description": "API for register and login user"
    },
    {
      "name": "Users",
      "description": "API for get, update, and delete users"
    }
  ],
  "paths": {
    "/movies": {
      "get": {
        "tags": [
          "Movies"
        ],
        "summary": "Get data movies",
        "description": "Get data movies",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The maximum number of users to return per page"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movies"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      },
      "post": {
        "summary": "create Movies",
        "tags": [
          "Movies"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "spiderman"
                  },
                  "genres": {
                    "type": "string",
                    "example": "actions"
                  },
                  "year": {
                    "type": "string",
                    "example": "2002"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movies"
                }
              }
            }
          }
        }
      }
    },
    "/movies/{id}": {
      "get": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID for users.",
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "summary": "get data movies by Id",
        "description": "get data movies by Id",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movies"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      },
      "put": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID for users.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "example": "spiderman"
                  },
                  "genres": {
                    "type": "string",
                    "example": "actions"
                  },
                  "year": {
                    "type": "string",
                    "example": "2002"
                  }
                }
              }
            }
          }
        },
        "summary": "Update an existing movies",
        "description": "Update an existing movies by Id",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movies"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Movies"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID for users.",
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "summary": "Update an existing pet",
        "description": "Update an existing pet by Id",
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "get data users",
        "description": "get data users",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "description": "The page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The maximum number of users to return per page"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID for users.",
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "summary": "get data users by id",
        "description": "get data users by id",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID for users.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "budi@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "password123"
                  },
                  "gender": {
                    "type": "string",
                    "example": "male"
                  },
                  "role": {
                    "type": "string",
                    "example": "admin"
                  }
                }
              }
            }
          }
        },
        "summary": "Update an existing users",
        "description": "Update an existing users by Id",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movies"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "ID for users.",
            "schema": {
              "type": "integer",
              "example": 1
            }
          }
        ],
        "summary": "delete an existing users",
        "description": "Update an existing pet by Id",
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "summary": "register new users",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "budi@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  },
                  "confirmPassword": {
                    "type": "string",
                    "example": "password123"
                  },
                  "gender": {
                    "type": "string",
                    "example": "male"
                  },
                  "role": {
                    "type": "string",
                    "example": "admin"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "login users",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "budi@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Movies": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "title": {
            "type": "string",
            "example": "spiderman"
          },
          "genres": {
            "type": "string",
            "example": "actions"
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 10
          },
          "email": {
            "type": "string",
            "example": "budi@gmail.com"
          },
          "password": {
            "type": "string",
            "example": "$2b$10$EaR2icAhOIuM4WmaRc63u.9QCK2QADeso7ZhVtJGud3TMOV02Hc16"
          },
          "role": {
            "type": "string",
            "example": "users"
          },
          "gender": {
            "type": "string",
            "example": "male"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}